diff --git a/src/renderer/tr_backend.c b/src/renderer/tr_backend.c
index bed82b0..b61eeed 100644
--- a/src/renderer/tr_backend.c
+++ b/src/renderer/tr_backend.c
@@ -1348,6 +1348,10 @@ void RE_StretchRaw( int x, int y, int w, int h, int cols, int rows, const byte *
 
 	RB_SetGL2D();
 
+#if 1
+	tr.cinematicShader->stages[0]->bundle[0].image[0] = tr.scratchImage[client];
+	RE_StretchPic( x, y, w, h, 0.5f / cols, 0.5f / rows, 1.0f - 0.5f / cols, 1.0f - 0.5 / rows, tr.cinematicShader->index );
+#else
 	D3DCOLOR color = D3DCOLOR_COLORVALUE(tr.identityLight, tr.identityLight, tr.identityLight, 1.0f);
 	//qglColor3f( tr.identityLight, tr.identityLight, tr.identityLight );
 
@@ -1401,6 +1405,7 @@ void RE_StretchRaw( int x, int y, int w, int h, int cols, int rows, const byte *
 	//qglTexCoord2f( 0.5f / cols, ( rows - 0.5f ) / rows );
 	//qglVertex2f( x, y + h );
 	//qglEnd();
+#endif
 }
 
 
diff --git a/src/renderer/tr_local.h b/src/renderer/tr_local.h
index 77e2465..f17bcd7 100644
--- a/src/renderer/tr_local.h
+++ b/src/renderer/tr_local.h
@@ -984,6 +984,7 @@ typedef struct {
 	shader_t                *defaultShader;
 	shader_t                *shadowShader;
 //	shader_t				*projectionShadowShader;
+	shader_t				*cinematicShader;
 	shader_t                *dlightShader;      //----(SA) added
 
 	shader_t                *flareShader;
diff --git a/src/renderer/tr_shader.c b/src/renderer/tr_shader.c
index a1bb0c6..ba81a9d 100644
--- a/src/renderer/tr_shader.c
+++ b/src/renderer/tr_shader.c
@@ -3035,6 +3035,22 @@ static void CreateInternalShaders( void ) {
 	Q_strncpyz( shader.name, "<stencil shadow>", sizeof( shader.name ) );
 	shader.sort = SS_STENCIL_SHADOW;
 	tr.shadowShader = FinishShader();
+
+	memset( &shader, 0, sizeof( shader ) );
+	memset( &stages, 0, sizeof( stages ) );
+
+	Q_strncpyz( shader.name, "<cinematic>", sizeof( shader.name ) );
+	shader.lightmapIndex = LIGHTMAP_NONE;
+
+	for ( int i = 0 ; i < MAX_SHADER_STAGES ; i++ ) {
+		stages[i].bundle[0].texMods = texMods[i];
+	}
+	stages[0].bundle[0].image[0] = tr.defaultImage; // will be updated by specific cinematic images
+	stages[0].bundle[0].tcGen = TCGEN_TEXTURE;
+	stages[0].active = qtrue;
+	stages[0].rgbGen = CGEN_IDENTITY_LIGHTING;
+	stages[0].stateBits = GLS_DEPTHTEST_DISABLE;
+	tr.cinematicShader = FinishShader();
 }
 
 static void CreateExternalShaders( void ) {
